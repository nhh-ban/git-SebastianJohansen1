df_tweedie <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject = NA)
df_tweedie
# Setting the alpha
alpha <- 0.05
# Creating the for loop with df$ references
for(i in 1:nrow(df_tweedie)) {
df_tweedie$share_reject[i] <- MTweedieTests(df_tweedie$N[i],
df_tweedie$M[i], alpha)
}
df_tweedie
# Creating a figure to comment on the validity of the t-test and sample size
ggplot(data = df_tweedie, aes(x = N, y = share_reject)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# Creating the same function as above, but for normal d data
simNormalTest <- function(N) {
# Simulating the data
sample_normal_data <- rnorm(N, mean = 10000, sd = 1)
# Running the t-test on the simulated data
result_normal <- t.test(sample_normal_data, mu = 10000)
return(result_normal$p.value)
}
# P-value for N = 10 000
simNormalTest(10000)
# Creating the same function as above, but for normal d data
MNormalTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simNormalTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MNormalTests(10, 100, 0.05)
# Creating a new data frame with one column for each share reject
df_tweedie_normal <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject_tweedie = NA,
share_reject_normal = NA)
df_tweedie_normal
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# We can see that the t-test works as expected for the normal distributed data
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
View(df_tweedie_normal)
library(tidyverse)
# Creating a function to simulate the sample mean with N, mu and sigman
simulate_sample_mean <- function(N, mu = 0, sigma = 1) {
# Creating sample data by simulating a normal distribution from the given mean and sd
sample_data <- rnorm(N, mean = mu, sd = sigma)
# Returning the mean of the sample data by adding mean()
return(mean(sample_data))
}
# Examples to see how the precision of the sample mean gets better with more observations
simulate_sample_mean(10)
simulate_sample_mean(100)
simulate_sample_mean(1000)
# Defining variable M
M <- 20
# Creating a vector with M length and NA elements
sample_mean <- rep(NA, M)
# For loop for to create x sample means from the simulated sample mean
for(i in 1:M) {
sample_mean[i] <- simulate_sample_mean(10)
}
sample_mean
# Calculating the standard deviation of the sample mean
sd_sample_mean <- sd(sample_mean)
sd_sample_mean
# Theoretical value
theoretical_value <- 1/sqrt(10)
theoretical_value
# Creating the data frame with N, st_dev and sigma
# I also included the Theoretical column straight into the tibble
sample_variance <- tibble(N = seq(10, 200, by = 10),
st_dev = NA,
sigma = 1,
theoretical = sigma/sqrt(N))
head(sample_variance)
M <- 100
rows <- nrow(sample_variance)
for(i in 1:rows) {
# Generating the M sample means for the different N values
current_N <- sample_variance$N[i]
sample_means <- replicate(M, simulate_sample_mean(current_N))
# Generating the sd of the M sample means
sample_variance$st_dev[i] <- sd(sample_means)
}
head(sample_variance)
# Creating a graph with two lines
# One improvement would be to add labels to the two lines
graph <- sample_variance %>%
ggplot(aes(x = N)) +
geom_line(aes(y = st_dev),color = "red", size = 1.5) +
geom_line(aes(y = theoretical), color = "black", size = 1) +
labs(
title = "Observed vs Theoretical Standard Deviation",
x = "N",
y = "Standard Deviation"
) +
theme_classic()
graph
library(tweedie)
# N = 10
rtweedie(n = 10, mu = 10000, phi = 1000, power = 1.9)
# N = 100 000
x <- rtweedie(n = 100000, mu = 10000, phi = 1000, power = 1.9)
mean(x)
# t-test
N <- 10000
true_mu <- 10000
sample <- rtweedie(N, mu = true_mu, phi = 1000, power = 1.9)
t.test(sample, mu = true_mu)
# This function simulates tweedie distributed data with the sample size N,
# and performs a t-test against a mean of 10 000
# It returns the p-value from the t-test.
simTweedieTest <- function(N) {
# Simulating the data
sample_data <- rtweedie(N, mu = 10000, phi = 100, power = 1.9)
# Running the t-test on the simulated data
result <- t.test(sample_data, mu = 10000)
# Returning the p-value
return(result$p.value)
}
# P-value for N = 10 000
simTweedieTest(10000)
# This function runs the tweedie data simulation and t-test M times for
# a sample size of N. It returns the percentage of tests where the p-value
# was less than the alpha
MTweedieTests <- function(M, N, alpha) {
# Empty vector for p-values
p_values <- numeric(M)
# For loop running the simT function M number of times
for (i in 1:M) {
p_values[i] <- simTweedieTest(N)
}
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Simplified version of the same task by using replicate
MTweedieTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simTweedieTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MTweedieTests(10, 100, 0.05)
# Creating the data frame for tweedie data
df_tweedie <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject = NA)
df_tweedie
# Setting the alpha
alpha <- 0.05
# Creating the for loop with df$ references
for(i in 1:nrow(df_tweedie)) {
df_tweedie$share_reject[i] <- MTweedieTests(df_tweedie$N[i],
df_tweedie$M[i], alpha)
}
df_tweedie
# Creating a figure to comment on the validity of the t-test and sample size
ggplot(data = df_tweedie, aes(x = N, y = share_reject)) +
geom_line(color = "blue") +
geom_point(color = "red") +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
# Creating the same function as above, but for normal d data
simNormalTest <- function(N) {
# Simulating the data
sample_normal_data <- rnorm(N, mean = 10000, sd = 1)
# Running the t-test on the simulated data
result_normal <- t.test(sample_normal_data, mu = 10000)
return(result_normal$p.value)
}
# P-value for N = 10 000
simNormalTest(10000)
# Creating the same function as above, but for normal d data
MNormalTests <- function(M, N, alpha) {
# Running the function simT M number of times
p_values <- replicate(M, simNormalTest(N))
# Identifying the percentage of times the p-value is less than alpha
percentage <- mean(p_values < alpha)
return(percentage)
}
MNormalTests(10, 100, 0.05)
# Creating a new data frame with one column for each share reject
df_tweedie_normal <- tibble(N = c(10, 100, 1000, 5000),
M = 100,
share_reject_tweedie = NA,
share_reject_normal = NA)
df_tweedie_normal
alpha <- 0.05
# Creating the for loop with df_tweedie_normal$ references
for(i in 1:nrow(df_tweedie_normal)) {
df_tweedie_normal$share_reject_tweedie[i] <- MTweedieTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
df_tweedie_normal$share_reject_normal[i] <- MNormalTests(df_tweedie_normal$N[i],
df_tweedie_normal$M[i], alpha)
}
df_tweedie_normal
# Creating the plot with tweedie in blue and normal in red
ggplot(data = df_tweedie_normal, aes(x = N)) +
geom_line(aes(y = share_reject_tweedie), color = "blue", size = 1) +
geom_line(aes(y = share_reject_normal), color = "red", size = 1) +
geom_point(aes(y = share_reject_tweedie), color = "blue", size = 3) +
geom_point(aes(y = share_reject_normal), color = "red", size = 3) +
labs(
x = "N",
y = "Share Rejects",
title = "T-test Validity"
) +
theme_classic()
raw_file <- readLines(con = "UCNG_Table4.txt", warn = FALSE)
setwd("C:/Users/sebas/OneDrive/1. 7. Semester/BAN400/git-SebastianJohansen1")
raw_file <- readLines(con = "UCNG_Table4.txt", warn = FALSE)
library(tidyverse)    # Contains most of what we need.
raw_file <- readLines(con = "suites_dw_Table1.txt", warn = FALSE)
# The readLines()-function puts each line into a separate element in a character
# vector. Looking at ?readLines it seems that we only need to provide one
# argument: the "connection", or in other words the location of the text file.
# Replace the "?" below with the location of the file. We do get a warning that
# the file does not end with an "end of line"-character (EOL). This does not
# seem to pose a problem later, and it seems that we can silece the warning by
# switchin off the "warn"-argument. Do that if you wish.
raw_file <- readLines(con = "suites_dw_Table1.txt", warn = FALSE)
# What do you need to replace the two question marks with in order to extract
# the first two letters?
substr(x = raw_file, start = 1, stop = 2)
# The next step is then to find out *which* line starts with "--", and pick out
# the first one. This can be done in a nice little pipe, where you have to fill
# out the question marks and the missing function names:
L <- (substr(x = raw_file, start = 1, stop = 2) == "--") %>%
which %>%
min
# Save the variable descriptions (i.e. the information in lines 1:(L-2)) in a
# text-file for future reference using the cat()-function. The first argument is
# the information that we want to print out. In order to get each element in the
# "raw_file"-vector on a separate line we also provide the sep-argument, where
# we put the "end-of-line"-character "\n". We also need to come up with a file
# name. Replace the question marks:
cat(raw_file[1:(L-2)], sep = "\n", file = "variable_descriptions.txt")
# trailing white spaces. The first step can be accomplished using the
# str_split()-function in the stringr-package (this is already loaded through
# tidyverse), but there is a delicate detail here. The "|"-character has special
# meaning in R ("or"), so it must be *escaped*, meaning that we tell R that it
# should be interpreted as a normal character. We do that by adding two forward
# slashes in front of it. This function returns a list, with one element for
# each input element. We only send one string in, and hence get only one list
# element out (check that!). We just unlist it to get out the vector. Then we
# apply the str_trim()-function (also in the stringr-package) to get rid of all
# the empty space. Replace the question mark below:
variable_names <-
str_split(string = raw_file[L-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
variable_names
comma_separated_values <-
raw_file[(L+1):length(raw_file)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
head(comma_separated_values)
comma_separated_values_with_names <-
c(paste(variable_names, collapse = ","),
comma_separated_values)
head(comma_separated_values_with_names)
# Replace the question mark and come up with a file name
cat(comma_separated_values_with_names, sep = "\n", file = "galaxies_filtered.csv")
# Read the file back in as a normal csv-file. The readr-package is part of
# tidyverse, so it is already loaded.
galaxies <- read_csv("galaxies_filtered.csv")
head(galaxies)
galaxies %>%
filter(D <= 11) %>%
ggplot(aes(x = a_26)) +
geom_histogram(bins = 50) +
labs(title = "Distribution of Galaxy Sizes (a_26)",
x = "Linear diameter of the galazy in kpc (a_26)",
y = "Count") +
theme_minimal()
galaxy_velocity <- readLines(con = "UCNG_Table4.txt", warn = FALSE)
galaxy_velocity
raw_velocity <- readLines(con = "UCNG_Table4.txt", warn = FALSE)
head(raw_velocity)
velocity_variable_names <-
str_split(string = raw_velocity[M-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
M <- (substr(x = raw_velocity, start = 1, stop = 2) == "--") %>%
which %>%
min
velocity_variable_names <-
str_split(string = raw_velocity[M-1], pattern = "\\|") %>%
unlist() %>%
str_trim()
comma_separated_velocity_values <-
raw_velocity[(M+1):length(raw_velocity)] %>%
gsub("\\|", ",", .) %>%
gsub(" ", "", .)
head(comma_separated_velocity_values)
comma_separated_velocity_values_with_names <-
c(paste(velocity_variable_names, collapse = ","),
comma_separated_velocity_values)
head(comma_separated_velocity_values_with_names)
cat(comma_separated_velocity_values_with_names, sep = "\n", file = "velocity_filtered.csv")
velocity <- read_csv("velocity_filtered.csv")
head(velocity)
# Joining the data together
galaxy_velocity <- inner_join(galaxies, velocity, by = "name")
head(galaxy_velocity)
galaxy_velocity %>%
select(name, cz)
galaxy_velocity %>%
select(name, d, cz)
galaxy_velocity %>%
select(name, D, cz)
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(expansion = D * cz)
# Solving the problem 4 task
galaxy_velocity %>%
filter(name = "Andromeda")
# Solving the problem 4 task
galaxy_velocity %>%
filter(name == "Andromeda")
View(galaxy_velocity)
View(galaxy_velocity)
galaxy_velocity %>%
ggplot() +
geom_point(x = D, y = cz) +
theme_classic()
galaxy_velocity %>%
ggplot(x = D, y = cz) +
geom_point() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz)) +
geom_point() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz)) +
geom_point() +
geom_line() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz)) +
geom_point() +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz)) +
geom_point(size = a_26) +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz)) +
geom_point(size = "a_26") +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz)) +
geom_point(aes(size = a_26)) +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz), color = m_b) +
geom_point(aes(size = a_26)) +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, color = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth() +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth() +
labs(
x = "test"
) +
theme_classic()
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth() +
labs(
title = "The expansion of space"
x = "Distance from Earth",
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth() +
labs(
title = "The expansion of space",
x = "Distance from Earth",
y = "Velocity relative to Earth"
) +
theme_classic()
geom_smooth(colour = "red"") +
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth(colour = "red") +
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth(colour = "red") +
labs(
title = "The expansion of space",
x = "Distance from Earth",
y = "Velocity relative to Earth"
) +
theme_classic()
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = cz / D)
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = mean(cz / D))
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = cz / D)
test <- galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = cz / D)
hei <- mean(test[H])
model <- lm(cz ~ D, data = galaxy_velocity)
hubble_constant_estimate <- coef(model)["D"]
# Plot proving Hubble's law about the expansion of space
galaxy_velocity %>%
ggplot(aes(x = D, y = cz, colour = m_b)) +
geom_point(aes(size = a_26)) +
geom_smooth(colour = "red") +
labs(
title = "The expansion of space",
x = "Distance from Earth",
y = "Velocity relative to Earth"
) +
theme_classic()
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = cz / D)
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = mean(cz / D))
galaxy_velocity %>%
mutate(H = mean(cz / D))
galaxy_velocity %>%
select(name, D, cz) %>%
mutate(H = mean(cz / D))
model_poly <- lm(cz ~ poly(D, degree=2), data = galaxy_velocity)
hubble_constant_estimate1 <- coef(model_poly)["D"]
hubble_constant_estimate1 <- coef(model_poly)["poly(D, degree = 2)1"]
hubble_constant_estimate2 <- coef(model_poly)["poly(D, degree = 2)2"]
